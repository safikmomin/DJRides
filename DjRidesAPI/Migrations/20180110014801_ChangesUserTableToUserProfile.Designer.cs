// <auto-generated />
using DjRidesApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DjRidesAPI.Migrations
{
    [DbContext(typeof(DjRidesContext))]
    [Migration("20180110014801_ChangesUserTableToUserProfile")]
    partial class ChangesUserTableToUserProfile
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DjRidesApi.Models.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<int>("Country");

                    b.Property<string>("State")
                        .IsRequired();

                    b.Property<string>("Street1")
                        .IsRequired();

                    b.Property<string>("Street2");

                    b.Property<int>("UserProfileID");

                    b.Property<int>("ZipCode");

                    b.HasKey("AddressID");

                    b.HasIndex("UserProfileID")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DjRidesApi.Models.Car", b =>
                {
                    b.Property<int>("CarID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color")
                        .IsRequired();

                    b.Property<string>("LicenseNumber");

                    b.Property<string>("Make")
                        .IsRequired();

                    b.Property<string>("Model")
                        .IsRequired();

                    b.Property<int>("UserProfileID");

                    b.Property<string>("Year");

                    b.HasKey("CarID");

                    b.HasIndex("UserProfileID");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("DjRidesApi.Models.Ride", b =>
                {
                    b.Property<int>("RideID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Availablity");

                    b.Property<int>("CarID");

                    b.Property<DateTime>("DateTime");

                    b.Property<int?>("Test");

                    b.Property<int?>("UserProfileID");

                    b.HasKey("RideID");

                    b.HasIndex("CarID");

                    b.HasIndex("UserProfileID");

                    b.ToTable("Rides");
                });

            modelBuilder.Entity("DjRidesApi.Models.RideAddress", b =>
                {
                    b.Property<int>("RideAddressID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<int>("Country");

                    b.Property<int?>("RideID");

                    b.Property<string>("State")
                        .IsRequired();

                    b.Property<string>("Street1")
                        .IsRequired();

                    b.Property<string>("Street2");

                    b.Property<int>("ToFrom");

                    b.Property<int>("ZipCode");

                    b.HasKey("RideAddressID");

                    b.HasIndex("RideID");

                    b.ToTable("RideAddressess");
                });

            modelBuilder.Entity("DjRidesApi.Models.UserProfile", b =>
                {
                    b.Property<int>("UserProfileID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthID");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int>("PhoneNumber");

                    b.HasKey("UserProfileID");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("DjRidesApi.Models.Address", b =>
                {
                    b.HasOne("DjRidesApi.Models.UserProfile", "User")
                        .WithOne("Address")
                        .HasForeignKey("DjRidesApi.Models.Address", "UserProfileID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DjRidesApi.Models.Car", b =>
                {
                    b.HasOne("DjRidesApi.Models.UserProfile", "User")
                        .WithMany("Car")
                        .HasForeignKey("UserProfileID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DjRidesApi.Models.Ride", b =>
                {
                    b.HasOne("DjRidesApi.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DjRidesApi.Models.UserProfile", "User")
                        .WithMany("Ride")
                        .HasForeignKey("UserProfileID");
                });

            modelBuilder.Entity("DjRidesApi.Models.RideAddress", b =>
                {
                    b.HasOne("DjRidesApi.Models.Ride", "Ride")
                        .WithMany("Address")
                        .HasForeignKey("RideID");
                });
#pragma warning restore 612, 618
        }
    }
}
